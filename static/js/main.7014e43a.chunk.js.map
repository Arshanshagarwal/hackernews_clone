{"version":3,"sources":["components/chart.jsx","components/Table.jsx","components/buttons.jsx","App.js","serviceWorker.js","index.js"],"names":["chart","info","lab","points","map","val","push","id","data","labels","datasets","fill","borderColor","pointBackgroundColor","className","height","width","options","maintainAspectRatio","responsive","scales","xAxes","gridLines","drawOnChartArea","type","legend","display","Table","action","hide","style","backgroundColor","color","textAlign","value","index","k","url","indexOf","now","Date","key","fontWeight","undefined","num_comments","onClick","e","title","href","slice","author","Math","round","getTime","created_at","buttons","next","prev","App","useState","setdata","seterror","nopg","setnopg","currentpg","setcurrentpg","useEffect","fetchData","saveInlocalStorage","arg","objectID","Storage","localStorage","setItem","JSON","stringify","update","temp","getItem","parse","a","axios","get","then","res","nbPages","hits","catch","err","current","elementsIndex","findIndex","element","newArray","filter","el","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.7014e43a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst chart = ({ info }) => {\n  let lab = [];\n  let points = [];\n  info.map((val) => {\n    lab.push(val.id);\n  });\n  info.map((val) => {\n    points.push(val.points);\n  });\n  const data = {\n    labels: lab,\n    datasets: [\n      {\n        data: points,\n        fill: false,\n        borderColor: \"#24669A\",\n        pointBackgroundColor: \"#24669A\",\n      },\n    ],\n  };\n  return (\n    <div className=\"chart\">\n      <Line\n        data={data}\n        height={300}\n        width={500}\n        options={{\n          maintainAspectRatio: false,\n          responsive: true,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawOnChartArea: false,\n                },\n                type: \"category\",\n              },\n            ],\n          },\n          legend: {\n            display: false,\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default chart;\n","import React from \"react\";\nimport \"../App.css\";\nimport Chart from \"./chart\";\n\nconst Table = ({ data, action, hide }) => {\n  return (\n    <table>\n      <thead>\n        <tr\n          style={{\n            backgroundColor: \"#ff6600\",\n            color: \"#F4F4ED\",\n            textAlign: \"left\",\n          }}\n        >\n          <th>Comments</th>\n          <th>Vote Count</th>\n          <th>UpVote</th>\n          <th>News Detalis</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((value, index) => {\n          let k = value.url != null ? value.url.indexOf(\"/\", 8) : 0;\n\n          let now = new Date();\n\n          return (\n            <tr key={index} className=\"items\">\n              <td style={{ color: \"#292E30\", fontWeight: 800 }}>\n                {value.num_comments == undefined ? 0 : value.num_comments}\n              </td>\n              <td\n                style={{\n                  color:\n                    value.points < 70\n                      ? \"#292E30\"\n                      : value.points > 100\n                      ? \"#FE6723\"\n                      : \"#AC4B22\",\n                  fontWeight: 800,\n                }}\n              >\n                {value.points}\n              </td>\n              <td>\n                <a onClick={(e) => action(value.id)} value='vote' >\n                  <div className=\"votearrow\"></div>\n                </a>\n              </td>\n              <td className=\"title\" style={{ textAlign: \"left\" }}>\n                <a className=\"head\">{value.title}</a>\n                <a href={`${value.url}`} className=\"k\">\n                  ({value.url != null ? value.url.slice(8, k) : null})\n                </a>\n                <span className=\"k\">by</span>{\" \"}\n                <a className=\"auth\">{value.author}</a>\n                <span className=\"k\">\n                  {Math.round(\n                    (now.getTime() - new Date(value.created_at).getTime()) /\n                      3.6e6\n                  )}{\" \"}\n                  hours ago\n                </span>\n                <a style={{ color: \"#000000\" }} value='hide' onClick={() => hide(value.id) }>\n                  <span className=\"s\">[</span>hide<span className=\"s\">]</span>\n                </a>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\n\nconst buttons = ({ next, prev }) => {\n  return (\n    <div className=\"action\">\n      <div>\n        <a onClick={prev}>Previous</a>\n      </div>\n      <div id=\"sep\"></div>\n      <div>\n        <a onClick={next}>Next</a>\n      </div>\n    </div>\n  );\n};\n\nexport default buttons;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Table from \"./components/Table.jsx\";\nimport Chart from \"./components/chart.jsx\";\nimport Buttons from \"./components/buttons.jsx\";\n\nfunction App() {\n  const [data, setdata] = useState([]);\n  const [error, seterror] = useState(\"\");\n  const [nopg, setnopg] = useState(0);\n  const [currentpg, setcurrentpg] = useState(0);\n  const [button, setbutton] = useState(0);\n  let BASE_URL =\n    \"http://hn.algolia.com/api/v1/search?tags=front_page&hitsPerPage=10\";\n  useEffect(() => {\n    fetchData(0);\n  }, []);\n  const saveInlocalStorage = (data, arg) => {\n    let k = [];\n    data.map((value) => {\n      k.push({\n        id: value.objectID,\n        points: value.points,\n        url: value.url,\n        num_comments: value.num_comments,\n        created_at: value.created_at,\n        author: value.author,\n        title: value.title,\n      });\n    });\n    if (typeof Storage !== \"undefined\") {\n      localStorage.setItem(`page-${arg}`, JSON.stringify(k));\n    }\n  };\n  const update = (arg) => {\n    let temp = localStorage.getItem(`page-${arg}`);\n    temp = JSON.parse(temp);\n    setdata(temp);\n  };\n  const fetchData = async (arg) => {\n    await axios\n      .get(`${BASE_URL}&page=${arg}`)\n      .then((res) => {\n        setnopg(res.data.nbPages);\n        if (localStorage.getItem(`page-${arg}`) === null) {\n          saveInlocalStorage(res.data.hits, arg);\n          update(arg);\n        } else {\n          update(arg);\n        }\n      })\n      .catch((err) => {\n        seterror(err);\n      });\n  };\n  const prev = () => {\n    if (currentpg - 1 >= 0) {\n      setcurrentpg(currentpg - 1);\n      fetchData(currentpg - 1);\n    }\n  };\n  const next = () => {\n    if (currentpg + 1 < nopg) {\n      fetchData(currentpg + 1);\n      setcurrentpg(currentpg + 1);\n    }\n  };\n  const hide = (id) => {\n    let current = localStorage.getItem(`page-${currentpg}`);\n    if (!current) {\n      current = [];\n    } else {\n      current = JSON.parse(current);\n    }\n    const elementsIndex = current.findIndex((element) => element.id == id);\n    let newArray = [...current];\n    newArray = newArray.filter((el) => {\n      return el.id !== id;\n    });\n    \n    // update the local storage\n    if (typeof Storage !== \"undefined\") {\n      localStorage.setItem(`page-${currentpg}`, JSON.stringify(newArray));\n    }\n    setdata(newArray);\n  };\n  const action = (id) => {\n    let current = localStorage.getItem(`page-${currentpg}`);\n    if (!current) {\n      current = [];\n    } else {\n      current = JSON.parse(current);\n    }\n    const elementsIndex = current.findIndex((element) => element.id == id);\n    let newArray = [...current];\n\n    newArray[elementsIndex] = {\n      ...newArray[elementsIndex],\n      points: newArray[elementsIndex].points + 1,\n    };\n\n    // update the local storage\n    if (typeof Storage !== \"undefined\") {\n      localStorage.setItem(`page-${currentpg}`, JSON.stringify(newArray));\n    }\n    setdata(newArray);\n    //     }\n    //     else if (button === 2) {\n    //       newArray = newArray.filter((el) => {\n    //   return el.id !== id;\n    // });\n    // console.log(newArray);\n    //     }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"base\">\n        <Table data={data} action={action} hide={hide} />\n        <Buttons next={next} prev={prev} />\n        <div id=\"bar\"></div>\n        <div id=\"container\">\n          <div id=\"vote\">Votes</div>\n          <Chart info={data} />\n        </div>\n        <div id=\"id\">ID</div>\n        <div id=\"bar\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}